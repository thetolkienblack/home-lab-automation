---
# Comprehensive Security Hardening Playbook
# Description: Complete server security hardening for RHEL/CentOS, Ubuntu, and Debian
# Features: SSH hardening, UFW/firewalld, fail2ban, TCP wrappers, unattended upgrades
# Usage: ansible-playbook -i inventory comprehensive_security.yml

- name: "Comprehensive Security Hardening"
  hosts: all
  become: true
  gather_facts: true
  environment:
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

  vars_files:
    - "{{ playbook_dir }}/../../group_vars/all/main.yml"
    - "{{ playbook_dir }}/../../group_vars/all/vault.yml"

  pre_tasks:
    - name: "Load OS-specific variables"
      ansible.builtin.include_vars: "{{ playbook_dir }}/../../group_vars/{{ ansible_os_family | lower }}/main.yml"
      changed_when: false

    - name: "Check if running as root or with sudo"
      ansible.builtin.command: whoami
      register: current_user
      changed_when: false

    - name: "Validate required variables"
      ansible.builtin.assert:
        that:
          - whitelist_ips is defined
          - whitelist_ips | length > 0
        fail_msg: "whitelist_ips must be defined with at least one IP/CIDR"
        success_msg: "Security configuration variables validated"

    - name: "Display comprehensive security summary"
      ansible.builtin.debug:
        msg:
          - "=== COMPREHENSIVE SECURITY HARDENING SUMMARY ==="
          - "Host: {{ inventory_hostname }}"
          - "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
          - "SSH port: {{ ssh_port }}"
          - "Firewall enabled: {{ firewall_enabled }}"
          - "Fail2ban enabled: {{ fail2ban_enabled }}"
          - "Whitelist IPs: {{ whitelist_ips | join(', ') }}"
          - "Timezone: {{ timezone }}"
          - "Unattended upgrades: {{ enable_unattended_upgrades }}"

    - name: "Update package cache (Debian/Ubuntu)"
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: "Update package cache (RHEL/CentOS)"
      ansible.builtin.dnf:
        update_cache: true
      when: ansible_os_family == "RedHat"

    - name: "Upgrade all packages (Debian/Ubuntu)"
      ansible.builtin.apt:
        upgrade: dist
      when: ansible_os_family == "Debian"

    - name: "Upgrade all packages (RHEL/CentOS)"
      ansible.builtin.dnf:
        name: "*"
        state: present
      when: ansible_os_family == "RedHat"

    - name: "Install essential packages"
      ansible.builtin.package:
        name: "{{ os_essential_packages }}"
        state: present

  tasks:
    # ===========================================
    # TIMEZONE CONFIGURATION
    # ===========================================

    - name: "Configure system timezone"
      community.general.timezone:
        name: "{{ timezone }}"

    # ===========================================
    # SSH SECURITY CONFIGURATION
    # ===========================================

    - name: "Configure SSH security settings"
      ansible.builtin.template:
        src: "{{ playbook_dir }}/../../templates/security/ssh/sshd_config.j2" # noqa no-relative-paths
        dest: /etc/ssh/sshd_config.d/99-custom-security.conf
        owner: root
        group: root
        mode: '0644'
        validate: '/usr/sbin/sshd -t -f %s'
      notify: "Restart ssh"

    # ===========================================
    # FIREWALL CONFIGURATION (UFW for Debian/Ubuntu, firewalld for RHEL)
    # ===========================================

    - name: "Reset UFW to defaults (Debian/Ubuntu)"
      community.general.ufw:
        state: reset
      when:
        - ansible_os_family == "Debian"
        - firewall_enabled
        - firewall_reset_before_config

    - name: "Configure UFW default policies (Debian/Ubuntu)"
      community.general.ufw:
        direction: "{{ item.direction }}"
        policy: "{{ item.policy }}"
      loop:
        - { direction: 'incoming', policy: "{{ firewall_default_incoming }}" }
        - { direction: 'outgoing', policy: "{{ firewall_default_outgoing }}" }
        - { direction: 'routed', policy: "deny" }
      when:
        - ansible_os_family == "Debian"
        - firewall_enabled

    - name: "Allow all traffic from whitelisted IPs (UFW)"
      community.general.ufw:
        rule: allow
        from_ip: "{{ item }}"
        comment: "Whitelist {{ item }}"
      loop: "{{ whitelist_ips }}"
      when:
        - ansible_os_family == "Debian"
        - firewall_enabled

    - name: "Allow SSH from anywhere (UFW)"
      community.general.ufw:
        rule: allow
        port: "{{ ssh_port }}"
        proto: tcp
        comment: "SSH access"
      when:
        - ansible_os_family == "Debian"
        - firewall_enabled
        - firewall_allow_ssh_from_anywhere

    - name: "Allow HTTP from anywhere (UFW)"
      community.general.ufw:
        rule: allow
        port: "80"
        proto: tcp
        comment: "HTTP access"
      when:
        - ansible_os_family == "Debian"
        - firewall_enabled
        - firewall_allow_http

    - name: "Allow HTTPS from anywhere (UFW)"
      community.general.ufw:
        rule: allow
        port: "443"
        proto: tcp
        comment: "HTTPS access"
      when:
        - ansible_os_family == "Debian"
        - firewall_enabled
        - firewall_allow_https

    - name: "Enable UFW logging and firewall (Debian/Ubuntu)"
      community.general.ufw:
        state: enabled
        logging: "on"
      when:
        - ansible_os_family == "Debian"
        - firewall_enabled

    # Firewalld configuration for RHEL/CentOS
    - name: "Start and enable firewalld (RHEL/CentOS)"
      ansible.builtin.systemd:
        name: firewalld
        enabled: true
        state: started
      when:
        - ansible_os_family == "RedHat"
        - firewall_enabled

    - name: "Configure firewalld rich rules for whitelisted IPs (RHEL/CentOS)"
      ansible.posix.firewalld:
        rich_rule: "rule family='ipv4' source address='{{ item }}' accept"
        permanent: true
        immediate: true
        state: enabled
      loop: "{{ whitelist_ips }}"
      when:
        - ansible_os_family == "RedHat"
        - firewall_enabled

    - name: "Allow SSH in firewalld (RHEL/CentOS)"
      ansible.posix.firewalld:
        service: ssh
        permanent: true
        immediate: true
        state: enabled
      when:
        - ansible_os_family == "RedHat"
        - firewall_enabled
        - firewall_allow_ssh_from_anywhere

    - name: "Allow HTTP in firewalld (RHEL/CentOS)"
      ansible.posix.firewalld:
        service: http
        permanent: true
        immediate: true
        state: enabled
      when:
        - ansible_os_family == "RedHat"
        - firewall_enabled
        - firewall_allow_http

    - name: "Allow HTTPS in firewalld (RHEL/CentOS)"
      ansible.posix.firewalld:
        service: https
        permanent: true
        immediate: true
        state: enabled
      when:
        - ansible_os_family == "RedHat"
        - firewall_enabled
        - firewall_allow_https

    # ===========================================
    # FAIL2BAN CONFIGURATION
    # ===========================================

    - name: "Configure fail2ban jail settings"
      ansible.builtin.template:
        src: "{{ playbook_dir }}/../../templates/security/ssh/jail.local.j2" # noqa no-relative-paths
        dest: /etc/fail2ban/jail.local
        owner: root
        group: root
        mode: '0644'
        backup: true
      notify: "Restart fail2ban"
      when: fail2ban_enabled

    - name: "Ensure fail2ban is enabled and started"
      ansible.builtin.systemd:
        name: fail2ban
        enabled: true
        state: started
      when: fail2ban_enabled

    # ===========================================
    # UNATTENDED UPGRADES (Debian/Ubuntu only)
    # ===========================================

    - name: "Install unattended-upgrades (Debian/Ubuntu)"
      ansible.builtin.package:
        name: unattended-upgrades
        state: present
      when:
        - ansible_os_family == "Debian"
        - enable_unattended_upgrades

    - name: "Configure automatic updates (Debian/Ubuntu)"
      ansible.builtin.template:
        src: "{{ playbook_dir }}/../../templates/security/system/20auto-upgrades.j2" # noqa no-relative-paths
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        owner: root
        group: root
        mode: '0644'
        backup: true
      when:
        - ansible_os_family == "Debian"
        - enable_unattended_upgrades

    - name: "Configure unattended-upgrades settings (Debian/Ubuntu)"
      ansible.builtin.template:
        src: "{{ playbook_dir }}/../../templates/security/system/50unattended-upgrades.j2" # noqa no-relative-paths
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        owner: root
        group: root
        mode: '0644'
        backup: true
      when:
        - ansible_os_family == "Debian"
        - enable_unattended_upgrades

    - name: "Enable automatic updates (RHEL/CentOS)"
      ansible.builtin.package:
        name: dnf-automatic
        state: present
      when:
        - ansible_os_family == "RedHat"
        - enable_unattended_upgrades

    - name: "Configure dnf-automatic for security updates (RHEL/CentOS)"
      ansible.builtin.template:
        src: "{{ playbook_dir }}/../../templates/security/ssh/dnf-automatic.conf.j2" # noqa no-relative-paths
        dest: /etc/dnf/automatic.conf
        owner: root
        group: root
        mode: '0644'
        backup: true
      notify: "Restart dnf-automatic"
      when:
        - ansible_os_family == "RedHat"
        - enable_unattended_upgrades

    # ===========================================
    # SYSCTL SECURITY PARAMETERS
    # ===========================================

    - name: "Configure kernel security parameters"
      ansible.builtin.template:
        src: "{{ playbook_dir }}/../../templates/security/system/99-security.conf.j2" # noqa no-relative-paths
        dest: /etc/sysctl.d/99-security.conf
        owner: root
        group: root
        mode: '0644'
        backup: true
      notify: "Reload sysctl"
      when: configure_sysctl_security

    # ===========================================
    # TCP WRAPPERS CONFIGURATION
    # ===========================================

    - name: "Configure hosts.allow with whitelist"
      ansible.builtin.template:
        src: "{{ playbook_dir }}/../../templates/security/ssh/hosts.allow.j2" # noqa no-relative-paths
        dest: /etc/hosts.allow
        owner: root
        group: root
        mode: '0644'
        backup: true
      when: tcp_wrappers_enabled

    - name: "Configure hosts.deny"
      ansible.builtin.template:
        src: "{{ playbook_dir }}/../../templates/security/ssh/hosts.deny.j2" # noqa no-relative-paths
        dest: /etc/hosts.deny
        owner: root
        group: root
        mode: '0644'
        backup: true
      when: tcp_wrappers_enabled

    # ===========================================
    # LOG ROTATION CONFIGURATION
    # ===========================================

    - name: "Configure custom log rotation"
      ansible.builtin.template:
        src: "{{ playbook_dir }}/../../templates/security/logs/logrotate-custom.j2" # noqa no-relative-paths
        dest: /etc/logrotate.d/custom
        owner: root
        group: root
        mode: '0644'
        backup: true
      when: configure_custom_logrotate

    # ===========================================
    # SYSTEM LIMITS CONFIGURATION
    # ===========================================

    - name: "Configure system limits"
      ansible.builtin.template:
        src: "{{ playbook_dir }}/../../templates/security/system/99-custom.conf.j2" # noqa no-relative-paths
        dest: /etc/security/limits.d/99-custom.conf
        owner: root
        group: root
        mode: '0644'
        backup: true
      when: configure_system_limits

    # ===========================================
    # SERVICE MANAGEMENT
    # ===========================================

    - name: "Ensure critical services are enabled and running (Debian/Ubuntu)"
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - ssh
        - rsyslog
        - ntp
      failed_when: false
      when: ansible_os_family == "Debian"

    - name: "Ensure critical services are enabled and running (RHEL/CentOS)"
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - sshd
        - rsyslog
        - chronyd
      failed_when: false
      when: ansible_os_family == "RedHat"

    # ===========================================
    # CLEANUP
    # ===========================================

    - name: "Clean up package cache (Debian/Ubuntu)"
      ansible.builtin.apt:
        autoremove: true
        autoclean: true
      when: ansible_os_family == "Debian"

    - name: "Clean up package cache (RHEL/CentOS)"
      ansible.builtin.dnf:
        autoremove: true
      when: ansible_os_family == "RedHat"

  post_tasks:
    - name: "Verify security configuration"
      block:
        - name: "Test SSH daemon configuration"
          ansible.builtin.command: /usr/sbin/sshd -t
          changed_when: false

        - name: "Check firewall status (UFW)"
          ansible.builtin.command: ufw status
          register: ufw_status_result
          changed_when: false
          when:
            - ansible_os_family == "Debian"
            - firewall_enabled

        - name: "Check firewall status (firewalld)"
          ansible.builtin.command: firewall-cmd --state
          register: firewalld_status_result
          changed_when: false
          when:
            - ansible_os_family == "RedHat"
            - firewall_enabled

        - name: "Check fail2ban status"
          ansible.builtin.command: fail2ban-client status
          register: fail2ban_status_result
          changed_when: false
          when: fail2ban_enabled

        - name: "Display comprehensive security results"
          ansible.builtin.debug:
            msg:
              - "=== COMPREHENSIVE SECURITY HARDENING COMPLETED ==="
              - "Hostname: {{ ansible_hostname }}"
              - "IP Address: {{ ansible_default_ipv4.address | default('Unknown') }}"
              - "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
              - "SSH daemon: Configured and running"
              - >
                "Firewall:
                  {{ 'Active (UFW)' if ansible_os_family == 'Debian' and firewall_enabled
                   else 'Active (firewalld)' if ansible_os_family == 'RedHat' and firewall_enabled
                   else 'Disabled' }}"
              - "Fail2ban: {{ 'Active' if fail2ban_enabled else 'Disabled' }}"
              - "TCP Wrappers: {{ 'Configured' if tcp_wrappers_enabled else 'Disabled' }}"
              - "Unattended upgrades: {{ 'Enabled' if enable_unattended_upgrades else 'Disabled' }}"
              - "Timezone: {{ timezone }}"

        - name: "Log successful security hardening"
          ansible.builtin.lineinfile:
            path: /var/log/security-hardening.log
            create: true
            owner: root
            group: root
            mode: '0600'
            line: >-
              {{ ansible_date_time.iso8601 }} - SUCCESS: Comprehensive security hardening completed on
              {{ inventory_hostname }} ({{ ansible_distribution }})
              with {{ whitelist_ips | length }} whitelisted IPs

      rescue:
        - name: "Log failed security hardening"
          ansible.builtin.lineinfile:
            path: /var/log/security-hardening.log
            create: true
            owner: root
            group: root
            mode: '0600'
            line: >-
              {{ ansible_date_time.iso8601 }} - FAILED: Security hardening failed on {{ inventory_hostname }}

        - name: "Display rollback information"
          ansible.builtin.debug:
            msg:
              - "=== SECURITY HARDENING FAILED ==="
              - "Check individual service status manually"
              - "Backup files are available for restoration"
              - "Review logs for specific errors"
              - "Test SSH access before logging out"

        - name: "Fail with security error info"
          ansible.builtin.fail:
            msg: "Security hardening failed. Check logs and service status."

  # ===========================================
  # HANDLERS
  # ===========================================

  handlers:
    - name: "Restart ssh"
      ansible.builtin.systemd:
        name: "{{ 'sshd' if ansible_os_family == 'RedHat' else 'ssh' }}"
        state: restarted

    - name: "Restart fail2ban"
      ansible.builtin.systemd:
        name: fail2ban
        state: restarted

    - name: "Restart dnf-automatic"
      ansible.builtin.systemd:
        name: dnf-automatic.timer
        enabled: true
        state: restarted

    - name: "Reload sysctl"
      ansible.builtin.command: sysctl -p /etc/sysctl.d/99-security.conf
      changed_when: true

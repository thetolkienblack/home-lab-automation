# host_vars/docker-host-01/stacks/comprehensive-example.yml
---
stack_name: comprehensive-example

# .env file variables
env_variables:
  COMPOSE_PROJECT_NAME: "comprehensive_{{ inventory_hostname_short }}"
  TZ: "{{ timezone }}"
  DOMAIN_NAME: "{{ domain_name }}"
  DATA_ROOT: "/opt/data"
  CONFIG_ROOT: "/opt/config"
  LOGS_ROOT: "/var/log/docker"
  
  # Database credentials
  POSTGRES_DB: myapp
  POSTGRES_USER: appuser
  POSTGRES_PASSWORD: "{{ vault_postgres_password }}"
  
  # Redis configuration
  REDIS_PASSWORD: "{{ vault_redis_password }}"
  
  # App configuration
  SECRET_KEY: "{{ vault_app_secret_key }}"
  DEBUG_MODE: "false"
  API_BASE_URL: "https://api.{{ domain_name }}"

# Service definitions with ALL possible options
services:
  # Web application with most options
  - name: webapp
    image: nginx:alpine
    build:
      context: ./webapp
      dockerfile: Dockerfile.prod
      args:
        BUILD_ENV: production
        NODE_VERSION: "18"
      target: production
    container_name: webapp_production
    hostname: webapp-host
    domainname: "{{ domain_name }}"
    
    # Resource management
    cpu_limit: "2.0"
    memory_limit: "1G"
    memory_reservation: "512M"
    cpu_reservation: "1.0"
    pids_limit: 100
    
    # Advanced deployment configuration
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == worker
          - node.labels.environment == production
        preferences:
          - spread: node.labels.datacenter
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 300s
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
        order: start-first
    
    # Security configuration
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
      - seccomp:unconfined
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
    cap_drop:
      - ALL
    privileged: false
    read_only: false
    user: "1000:1000"
    group_add:
      - audio
      - video
    
    # Runtime and system configuration
    runtime: runc
    init: true
    pid: "container:database"
    ipc: "container:database"
    uts: "host"
    userns_mode: "host"
    
    # System tuning
    sysctls:
      net.core.somaxconn: 1024
      net.ipv4.tcp_keepalive_time: 600
      kernel.shm_rmid_forced: 0
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      memlock: 67108864
      nproc: 4096
    shm_size: 256M
    stdin_open: true
    tty: true
    
    # Network configuration
    ports:
      - "80:80"
      - "443:443/tcp"
      - "127.0.0.1:8080:8080"
    expose:
      - "9000"
      - "9001"
    networks:
      frontend:
        aliases:
          - web
          - nginx
        ipv4_address: 172.20.0.10
        priority: 1000
      backend:
        aliases:
          - app-backend
    network_mode: "bridge"
    mac_address: "02:42:ac:11:00:02"
    
    # Storage configuration
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf:ro"
      - "webapp_data:/var/www/html"
      - "/etc/localtime:/etc/localtime:ro"
      - "type=bind,source=/host/path,target=/container/path,readonly"
    tmpfs:
      - /tmp
      - /var/cache/nginx:size=100M,exec
    devices:
      - "/dev/sda:/dev/xvda:rwm"
      - "/dev/random:/dev/random:r"
    device_cgroup_rules:
      - "c 1:3 mr"
      - "a 7:* rmw"
    
    # Environment and configuration
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: "postgresql://user:pass@db:5432/myapp"
      REDIS_URL: "redis://redis:6379"
    env_file:
      - .env
      - ./config/app.env
    working_dir: /app
    command: ["npm", "start", "--production"]
    entrypoint: ["docker-entrypoint.sh"]
    
    # Dependencies and ordering
    depends_on:
      database:
        condition: service_healthy
        restart: true
      redis:
        condition: service_started
        restart: false
    links:
      - database:db
      - redis:cache
    external_links:
      - external_service:external
    
    # Health checks
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      start_interval: 5s
    
    # Restart and stop configuration
    restart: unless-stopped
    stop_grace_period: 30s
    stop_signal: SIGTERM
    
    # Labels and metadata
    labels:
      com.example.description: "Main web application"
      com.example.department: "engineering"
      com.example.version: "1.2.3"
      traefik.enable: "true"
      traefik.http.routers.webapp.rule: "Host(`app.{{ domain_name }}`)"
      traefik.http.services.webapp.loadbalancer.server.port: "3000"
    
    # Logging configuration
    logging:
      driver: fluentd
      options:
        fluentd-address: "localhost:24224"
        fluentd-async: "true"
        tag: "webapp.logs"
    
    # Extensions and custom configuration
    extends:
      file: common-services.yml
      service: web-base
    extra_hosts:
      - "api.local:192.168.1.100"
      - "cache.local:192.168.1.101"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_search:
      - "{{ domain_name }}"
      - "local.domain"
    dns_opt:
      - use-vc
      - no-tld-query
    cgroup_parent: "/docker/custom"
    isolation: "hyperv"
    scale: 3
    profiles:
      - production
      - web
    platform: "linux/amd64"
    pull_policy: always

  # Database service with different options
  - name: database
    image: postgres:15-alpine
    container_name: postgres_db
    hostname: postgres-primary
    
    # GPU support (for ML databases)
    gpu_support: nvidia
    gpu_count: 1
    gpu_capabilities: ["compute", "utility"]
    
    # Resource limits
    cpu_limit: "4.0"
    memory_limit: "4G"
    memory_reservation: "2G"
    
    # Security for database
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    read_only: true
    user: "999:999"
    
    # System configuration
    sysctls:
      kernel.shmmax: 268435456
      kernel.shmall: 2097152
    ulimits:
      nofile: 65536
      memlock: -1
    shm_size: 512M
    
    # Network (internal only)
    networks:
      - backend
    
    # Storage
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
      - "./init-scripts:/docker-entrypoint-initdb.d:ro"
    tmpfs:
      - /tmp
      - /var/run/postgresql
    
    # Environment
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_INITDB_ARGS: "--data-checksums --auth-host=scram-sha-256"
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    restart: unless-stopped
    stop_grace_period: 60s
    
    labels:
      com.example.service: "database"
      backup.enable: "true"
      backup.schedule: "0 2 * * *"
    
    logging:
      driver: journald
      options:
        tag: "postgres-{{ inventory_hostname }}"

  # Redis cache service
  - name: redis
    image: redis:7-alpine
    container_name: redis_cache
    
    # Minimal resources
    cpu_limit: "0.5"
    memory_limit: "256M"
    
    # Security
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "999:999"
    
    # Network
    networks:
      - backend
    
    # Configuration
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--maxmemory", "200mb"]
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    
    restart: unless-stopped
    
    labels:
      com.example.service: "cache"

  # Worker service with different configurations
  - name: worker
    image: myapp:worker
    build:
      context: .
      dockerfile: Dockerfile.worker
    
    # No ports (background worker)
    # Multiple replicas via scale
    scale: 3
    
    # Different restart policy
    restart: on-failure
    
    # Depends on database and redis
    depends_on:
      - database
      - redis
    
    # Worker-specific environment
    environment:
      WORKER_TYPE: "background"
      QUEUE_NAME: "default"
      CONCURRENCY: 4
    
    # Logging to different destination
    logging:
      driver: syslog
      options:
        syslog-address: "tcp://192.168.1.100:514"
        tag: "worker"
    
    profiles:
      - production
      - workers

# Network definitions with all options
networks:
  - name: frontend
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: "docker-frontend"
      com.docker.network.bridge.enable_icc: "true"
    attachable: true
    enable_ipv6: false
    ipam:
      driver: default
      config:
        - subnet: "172.20.0.0/16"
          ip_range: "172.20.240.0/20"
          gateway: "172.20.0.1"
          aux_addresses:
            host1: "172.20.0.5"
            host2: "172.20.0.6"
      options:
        foo: bar
    internal: false
    labels:
      com.example.description: "Frontend network"
      com.example.type: "public"

  - name: backend
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: "172.21.0.0/16"
          gateway: "172.21.0.1"
    labels:
      com.example.description: "Backend internal network"
      com.example.type: "private"

  - name: monitoring
    external:
      name: "external_monitoring_network"

# Volume definitions with all options
volumes:
  - name: webapp_data
    driver: local
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.200,rw"
      device: ":/mnt/webapp-data"
    labels:
      com.example.description: "Web application data"
      backup.include: "true"

  - name: postgres_data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "/opt/postgres-data"
    labels:
      com.example.description: "PostgreSQL data directory"
      backup.include: "true"
      backup.priority: "high"

  - name: external_storage
    external:
      name: "shared_storage_volume"

# Secrets configuration
secrets:
  - name: db_password
    file: "./secrets/db_password.txt"
    labels:
      com.example.description: "Database password"

  - name: api_key
    external:
      name: "production_api_key"

  - name: ssl_cert
    driver: "file"
    driver_opts:
      path: "/etc/ssl/certs/app.crt"
    labels:
      com.example.type: "certificate"

# Configs configuration
configs:
  - name: nginx_config
    file: "./config/nginx.conf"
    labels:
      com.example.description: "Nginx configuration"

  - name: app_config
    external:
      name: "production_app_config"

  - name: logging_config
    template_driver: "golang"
    labels:
      com.example.type: "logging"
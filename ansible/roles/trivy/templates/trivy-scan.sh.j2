#!/bin/bash
# Trivy Daily Scan Script
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail

# Configuration
TRIVY_BIN="{{ trivy_binary_path }}"
REPORTS_DIR="{{ trivy_reports_dir }}"
CACHE_DIR="{{ trivy_cache_dir }}"
REPORT_FORMAT="{{ trivy_report_format }}"
SEVERITY="{{ trivy_severity_levels | join(',') }}"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
SCAN_LOG="${REPORTS_DIR}/scan_${TIMESTAMP}.log"

# Export environment variables
export TRIVY_CACHE_DIR="${CACHE_DIR}"
export DOCKER_HOST="unix://{{ trivy_docker_socket }}"

# Initialize scan log
echo "=== Trivy Vulnerability Scan ===" > "${SCAN_LOG}"
echo "Started at: $(date)" >> "${SCAN_LOG}"
echo "Report Directory: ${REPORTS_DIR}" >> "${SCAN_LOG}"
echo "" >> "${SCAN_LOG}"

{% if trivy_scan_running_containers %}
# Scan running Docker containers
echo "Scanning running Docker containers..." >> "${SCAN_LOG}"
RUNNING_CONTAINERS=$(docker ps --format "{{ '{{.Names}}' }}" 2>/dev/null || echo "")

if [ -n "${RUNNING_CONTAINERS}" ]; then
    for container in ${RUNNING_CONTAINERS}; do
        echo "  Scanning container: ${container}" >> "${SCAN_LOG}"
        CONTAINER_REPORT="${REPORTS_DIR}/container_${container}_${TIMESTAMP}.${REPORT_FORMAT}"

        if ${TRIVY_BIN} image \
            --format "${REPORT_FORMAT}" \
            --severity "${SEVERITY}" \
            --output "${CONTAINER_REPORT}" \
            "$(docker inspect --format='{{ '{{.Config.Image}}' }}' "${container}" 2>/dev/null)" \
            >> "${SCAN_LOG}" 2>&1; then
            echo "    ✓ Scan completed: ${CONTAINER_REPORT}" >> "${SCAN_LOG}"
        else
            echo "    ✗ Scan failed for ${container}" >> "${SCAN_LOG}"
        fi
    done
else
    echo "  No running containers found" >> "${SCAN_LOG}"
fi
echo "" >> "${SCAN_LOG}"
{% endif %}

{% if trivy_docker_images_to_scan | length > 0 %}
# Scan specified Docker images
echo "Scanning specified Docker images..." >> "${SCAN_LOG}"
{% for image in trivy_docker_images_to_scan %}
echo "  Scanning image: {{ image }}" >> "${SCAN_LOG}"
IMAGE_REPORT="${REPORTS_DIR}/image_$(echo '{{ image }}' | tr ':/' '_')_${TIMESTAMP}.${REPORT_FORMAT}"

if ${TRIVY_BIN} image \
    --format "${REPORT_FORMAT}" \
    --severity "${SEVERITY}" \
    --output "${IMAGE_REPORT}" \
    "{{ image }}" \
    >> "${SCAN_LOG}" 2>&1; then
    echo "    ✓ Scan completed: ${IMAGE_REPORT}" >> "${SCAN_LOG}"
else
    echo "    ✗ Scan failed for {{ image }}" >> "${SCAN_LOG}"
fi
{% endfor %}
echo "" >> "${SCAN_LOG}"
{% endif %}

{% if trivy_scan_filesystem and trivy_filesystem_paths | length > 0 %}
# Scan filesystem paths
echo "Scanning filesystem paths..." >> "${SCAN_LOG}"
{% for path in trivy_filesystem_paths %}
echo "  Scanning path: {{ path }}" >> "${SCAN_LOG}"
FS_REPORT="${REPORTS_DIR}/filesystem_$(echo '{{ path }}' | tr '/' '_')_${TIMESTAMP}.${REPORT_FORMAT}"

if ${TRIVY_BIN} fs \
    --format "${REPORT_FORMAT}" \
    --severity "${SEVERITY}" \
    --output "${FS_REPORT}" \
    "{{ path }}" \
    >> "${SCAN_LOG}" 2>&1; then
    echo "    ✓ Scan completed: ${FS_REPORT}" >> "${SCAN_LOG}"
else
    echo "    ✗ Scan failed for {{ path }}" >> "${SCAN_LOG}"
fi
{% endfor %}
echo "" >> "${SCAN_LOG}"
{% endif %}

# Summary
echo "=== Scan Summary ===" >> "${SCAN_LOG}"
echo "Completed at: $(date)" >> "${SCAN_LOG}"
echo "Reports generated in: ${REPORTS_DIR}" >> "${SCAN_LOG}"
echo "" >> "${SCAN_LOG}"

# List generated reports
echo "Generated reports:" >> "${SCAN_LOG}"
ls -lh "${REPORTS_DIR}"/*_${TIMESTAMP}.* 2>/dev/null >> "${SCAN_LOG}" || echo "No reports generated" >> "${SCAN_LOG}"

echo "Scan completed successfully"
exit 0

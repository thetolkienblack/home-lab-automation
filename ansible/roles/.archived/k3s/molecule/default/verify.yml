---
- name: Verify
  hosts: all
  become: true
  gather_facts: true

  tasks:
    - name: Check k3s binary exists
      ansible.builtin.stat:
        path: /usr/local/bin/k3s
      register: k3s_binary

    - name: Verify k3s binary is installed
      ansible.builtin.assert:
        that:
          - k3s_binary.stat.exists
          - k3s_binary.stat.executable
        fail_msg: "k3s binary not found or not executable"
        success_msg: "k3s binary is installed"

    - name: Check k3s version
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s --version
      register: k3s_version
      changed_when: false

    - name: Display k3s version
      ansible.builtin.debug:
        var: k3s_version.stdout_lines

    - name: Check k3s service status
      ansible.builtin.systemd:
        name: k3s
      register: k3s_service

    - name: Verify k3s service is running
      ansible.builtin.assert:
        that:
          - k3s_service.status.ActiveState == "active"
        fail_msg: "k3s service is not running"
        success_msg: "k3s service is active"

    - name: Wait for k3s to be fully ready
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s kubectl get nodes
      register: k3s_nodes
      until: k3s_nodes.rc == 0
      retries: 30
      delay: 10
      changed_when: false

    - name: Get cluster nodes
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s kubectl get nodes -o wide
      register: k3s_nodes_output
      changed_when: false

    - name: Display cluster nodes
      ansible.builtin.debug:
        var: k3s_nodes_output.stdout_lines

    - name: Verify node is ready
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s kubectl get nodes -o jsonpath='{.items[0].status.conditions[?(@.type=="Ready")].status}'
      register: node_ready
      changed_when: false

    - name: Assert node is ready
      ansible.builtin.assert:
        that:
          - "'True' in node_ready.stdout"
        fail_msg: "Node is not ready"
        success_msg: "Node is ready"

    - name: Get all pods
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s kubectl get pods -A
      register: k3s_pods
      changed_when: false

    - name: Display all pods
      ansible.builtin.debug:
        var: k3s_pods.stdout_lines

    - name: Check kubeconfig exists
      ansible.builtin.stat:
        path: /etc/rancher/k3s/k3s.yaml
      register: kubeconfig

    - name: Verify kubeconfig exists
      ansible.builtin.assert:
        that:
          - kubeconfig.stat.exists
        fail_msg: "Kubeconfig not found"
        success_msg: "Kubeconfig exists"

    - name: Check kubectl symlink
      ansible.builtin.stat:
        path: /usr/local/bin/kubectl
      register: kubectl_link

    - name: Verify kubectl symlink exists
      ansible.builtin.assert:
        that:
          - kubectl_link.stat.exists
          - kubectl_link.stat.islnk
        fail_msg: "kubectl symlink not found"
        success_msg: "kubectl symlink exists"

    - name: Test kubectl command
      ansible.builtin.command:
        cmd: /usr/local/bin/kubectl get nodes
      register: kubectl_test
      changed_when: false
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml

    - name: Display kubectl output
      ansible.builtin.debug:
        var: kubectl_test.stdout_lines

    - name: Get k3s server token
      ansible.builtin.slurp:
        src: /var/lib/rancher/k3s/server/node-token
      register: k3s_token

    - name: Verify token exists
      ansible.builtin.assert:
        that:
          - k3s_token.content | length > 0
        fail_msg: "k3s token not found"
        success_msg: "k3s token exists"
